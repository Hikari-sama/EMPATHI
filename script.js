// script.js

// 1. Get references to all necessary DOM elements
const messagePromptInput = document.getElementById('message-prompt');
const generateButton = document.getElementById('generate-btn');
const aiDraftDiv = document.getElementById('ai-draft');
const emphatiDraftDiv = document.getElementById('empathi-draft');
const emotionalFiltersDiv = document.getElementById('emotional-filters');


// Get references to the emotional filter elements (sliders and checkboxes)
const warmthSlider = document.getElementById('warmth-slider');
const formalitySlider = document.getElementById('formality-slider');
const poeticLevelSlider = document.getElementById('poetic-level-slider');
const closeRelationshipCheckbox = document.getElementById('close-relationship');
const seriousTopicCheckbox = document.getElementById('serious-topic');
const poetryLoverCheckbox = document.getElementById('poetry-lover');

// --- Mock AI Responses Data Structure ---
// This object holds pre-written, hardcoded AI outputs for a specific base prompt.
// In a real application, this would come from an actual AI model (e.g., OpenAI API).
const mockAIResponses = {
    // Example responses for a prompt like "Write a message to my friend who just lost their pet."
    "grieving_friend_pet": {
        aiOnlyDefault: "Dear [Friend's Name], I am writing to express my condolences on the recent passing of your pet. I understand that the loss of an animal companion can be a difficult experience. Sincerely, [Your Name]",
        empathiWarm: "My dearest [Friend's Name], I was so incredibly sad to hear about [Pet's Name]. Losing a beloved companion like them leaves such a huge hole in your heart. Please know I'm thinking of you and sending all my love. If you need anything at all, even just a distraction, please reach out. With deepest sympathy, [Your Name]",
        empathiPoetic: "Oh, [Friend's Name], my heart aches to hear of [Pet's Name]'s journey beyond the veil. May their paw prints forever echo in the quiet chambers of your memory, a testament to the boundless love they shared. In this tender twilight of grief, know that a gentle light of solace surrounds you. With heartfelt sorrow, [Your Name]"
    },
    // You can add more prompts and their variations here
    "default": { // Fallback for any other prompt
        aiOnlyDefault: "Here is a standard message generated by AI: Your request has been processed. Output provided.",
        empathiWarm: "Here's a friendly message crafted with care: Your request has been processed kindly.",
        empathiPoetic: "A whisper of thought, a digital verse: Your request unfolds, a gentle universe."
    }
};

// Function to simulate AI text generation based on prompt and (future) filters
function getAIGeneratedText(prompt, filters = {}) {
    // For this step, we're just returning the aiOnlyDefault.
    // In future steps, 'filters' will influence which response is chosen.

    // Simple logic to pick a relevant mock response based on keywords in the prompt
    // This makes the demo feel a bit more dynamic even with hardcoded data.
    if (prompt.toLowerCase().includes("grieving friend") || prompt.toLowerCase().includes("lost pet")) {
        return mockAIResponses.grieving_friend_pet.aiOnlyDefault;
    } else {
        return mockAIResponses.default.aiOnlyDefault;
    }
}

// Crucial: Function to generate Human-Guided EMPATHI text based on prompt and filters
function generateEmpathiText(prompt, filters) {
    let selectedResponseSet;
    if (prompt.toLowerCase().includes("grieving friend") || prompt.toLowerCase().includes("lost pet")) {
        selectedResponseSet = mockAIResponses.grieving_friend_pet;
    } else {
        selectedResponseSet = mockAIResponses.default;
    }

    // --- Logic to select the best empathetic response based on filters ---
    // This is where your "AI" (rule-based) decision-making happens based on human input.
    // The order of if/else if statements matters, as the first matching condition will be used.

    // Prioritize poetic if 'poetryLover' is checked AND poetic level is high
    if (filters.poetryLover && filters.poeticLevel > 70) {
        return selectedResponseSet.empathiPoetic;
    }
    // Prioritize warm if 'closeRelationship' is checked AND warmth is high
    if (filters.closeRelationship && filters.warmth > 60) {
        return selectedResponseSet.empathiWarm;
    }
    // Prioritize formal if 'seriousTopic' is checked AND formality is high
    if (filters.seriousTopic && filters.formality > 60) {
        return selectedResponseSet.empathiFormal;
    }
    // General poetic if poetic level is moderately high
    if (filters.poeticLevel > 40) {
        return selectedResponseSet.empathiPoetic;
    }
    // General warm if warmth is moderately high
    if (filters.warmth > 40) {
        return selectedResponseSet.empathiWarm;
    }
    // General formal if formality is moderately high
    if (filters.formality > 40) {
        return selectedResponseSet.empathiFormal;
    }

    // Fallback to warm if no specific strong filter matches
    return selectedResponseSet.empathiWarm;
}

// 2. Add an event listener to the "Generate Message" button
generateButton.addEventListener('click', () => {
    // Get the current value from the message prompt textarea
    const userPrompt = messagePromptInput.value;

    // 3. When the button is clicked, log the input prompt to the console (initial test)
    console.log('User Prompt:', userPrompt);

    // --- Placeholder for future AI and Human-Guided logic ---
    // For now, let's just update the AI draft div with the prompt
    if (userPrompt.trim() === '') {
        aiDraftDiv.innerHTML = '<p class="text-gray-500 italic">Please enter a message prompt.</p>';
        emphatiDraftDiv.innerHTML = '<p class="text-purple-500 italic">The human-guided, empathetic message will appear here.</p>';
        return;
    }

        // Call the function to get the AI generated text
    const aiGeneratedMessage = getAIGeneratedText(userPrompt);

    // Populate the "AI Generated Draft" div
    aiDraftDiv.innerHTML = `<p>${aiGeneratedMessage}</p>`;

    // --- Collect current values of human emotional filters ---
    const currentFilters = {
        warmth: parseInt(warmthSlider.value), // Convert string value to integer
        formality: parseInt(formalitySlider.value),
        poeticLevel: parseInt(poeticLevelSlider.value),
        closeRelationship: closeRelationshipCheckbox.checked, // Boolean true/false
        seriousTopic: seriousTopicCheckbox.checked,
        poetryLover: poetryLoverCheckbox.checked
    };

    console.log('Current Human Filters:', currentFilters);

    // Generate the human-guided EMPATHI message
    const emphatiMessage = generateEmpathiText(userPrompt, currentFilters);
    emphatiDraftDiv.innerHTML = `<p>${emphatiMessage}</p>`;
});


// Optional: Add event listeners to filters to update EMPATHI draft in real-time
// This provides a more interactive experience.
const filterElements = [
    warmthSlider, formalitySlider, poeticLevelSlider,
    closeRelationshipCheckbox, seriousTopicCheckbox, poetryLoverCheckbox
];

filterElements.forEach(element => {
    element.addEventListener('input', () => {
        // Only update if there's already a prompt in the AI draft
        if (messagePromptInput.value.trim() !== '') {
            const userPrompt = messagePromptInput.value;
            const currentFilters = {
                warmth: parseInt(warmthSlider.value),
                formality: parseInt(formalitySlider.value),
                poeticLevel: parseInt(poeticLevelSlider.value),
                closeRelationship: closeRelationshipCheckbox.checked,
                seriousTopic: seriousTopicCheckbox.checked,
                poetryLover: poetryLoverCheckbox.checked
            };
            const emphatiMessage = generateEmpathiText(userPrompt, currentFilters);
            emphatiDraftDiv.innerHTML = `<p>${emphatiMessage}</p>`;
        }
    });
});
// --- Future Development Notes ---
// In later steps, you'll expand this:
// - Implement getAIGeneratedText(prompt, filters) function for mocked/real AI.
// - Dynamically add sliders/checkboxes to emotionalFiltersDiv.
// - Implement generateEmpathiText(prompt, filters) function to use human input.
// - Update aiDraftDiv and emphatiDraftDiv with actual generated content.
